/* This is a generated header file providing the common items to everything related to the Analog SDK */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#pragma once

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <new>
#include "CoreMinimal.h"
#include "Kismet/BlueprintFunctionLibrary.h"

UENUM(BlueprintType)
enum class WootingAnalog_DeviceEventType : uint8 {
  /// Device has been connected
  Connected = 1 UMETA(DisplayName = "Connected"),
  /// Device has been disconnected
  Disconnected UMETA(DisplayName = "Disconnected")
};

UENUM(BlueprintType)
enum class WootingAnalog_KeycodeType {
  /// USB HID Keycodes https://www.usb.org/document-library/hid-usage-tables-112 pg53
  HID UMETA(DisplayName = "HID"),
  /// Scan code set 1
  ScanCode1 UMETA(DisplayName = "ScanCode Set 1"),
  /// Windows Virtual Keys
  VirtualKey UMETA(DisplayName = "Windows Virtual Keys"),
  /// Windows Virtual Keys which are translated to the current keyboard locale
  VirtualKeyTranslate UMETA(DisplayName = "Windows Virtual Keys (with locale conversion)"),
};


enum class WootingAnalogResult {
	Ok = 1 UMETA(DisplayName = "Ok"),
	/// Item hasn't been initialized
	UnInitialized = -2000 UMETA(DisplayName = "UnInitialized"),
	/// No Devices are connected
	NoDevices UMETA(DisplayName = "No Devices"),
	/// Device has been disconnected
	DeviceDisconnected UMETA(DisplayName = "Device Disconnected"),
	/// Generic Failure
	Failure UMETA(DisplayName = "Failure"),
	/// A given parameter was invalid
	InvalidArgument UMETA(DisplayName = "Invalid Argument"),
	/// No Plugins were found
	NoPlugins UMETA(DisplayName = "No Plugins"),
	/// The specified function was not found in the library
	FunctionNotFound UMETA(DisplayName = "Function Not Found"),
	/// No Keycode mapping to HID was found for the given Keycode
	NoMapping UMETA(DisplayName = "No Mapping"),
	/// Indicates that it isn't available on this platform
	NotAvailable UMETA(DisplayName = "Not Available"),
	/// Indicates that the operation that is trying to be used is for an older version
	IncompatibleVersion  UMETA(DisplayName = "Incompatible Version"),
};

using WootingAnalog_DeviceID = uint64_t;

/// The core `DeviceInfo` struct which contains all the interesting information
/// for a particular device
struct WootingAnalog_DeviceInfo {
  /// Device Vendor ID `vid`
  uint16_t vendor_id;
  /// Device Product ID `pid`
  uint16_t product_id;
  /// Device Manufacturer name
  const char *manufacturer_name;
  /// Device name
  const char *device_name;
  /// Unique device ID, which should be generated using `generate_device_id`
  WootingAnalog_DeviceID device_id;
};


enum class WootingAnalog_DeviceType {
	/// Device is of type Keyboard
	Keyboard = 1 UMETA(DisplayName = "Keyboard"),
	/// Device is of type Keypad
	Keypad UMETA(DisplayName = "Keypad"),
	/// Device
	Other UMETA(DisplayName = "Keypad"),
};

/// The core `DeviceInfo` struct which contains all the interesting information
/// for a particular device. This is for use internally and should be ignored if you're
/// trying to use it when trying to interact with the SDK using the wrapper
struct WootingAnalog_DeviceInfo;

using WootingAnalog_DeviceID = uint64_t;

/// The core `DeviceInfo` struct which contains all the interesting information
/// for a particular device. This is the version which the consumer of the SDK will receive
/// through the wrapper. This is not for use in the Internal workings of the SDK, that is what
/// DeviceInfo is for
struct WootingAnalog_DeviceInfo_FFI {
	/// Device Vendor ID `vid`
	uint16_t vendor_id;
	/// Device Product ID `pid`
	uint16_t product_id;
	/// Device Manufacturer name
	char* manufacturer_name;
	/// Device name
	char* device_name;
	/// Unique device ID, which should be generated using `generate_device_id`
	WootingAnalog_DeviceID device_id;
	/// Hardware type of the Device
	WootingAnalog_DeviceType device_type;
};

extern "C" {

	/// Drops the given `DeviceInfo`
	void drop_device_info(WootingAnalog_DeviceInfo* device);

	/// Create a new device info struct. This is only for use in Plugins that are written in C
	/// Rust plugins should use the native constructor
	/// The memory for the struct has been allocated in Rust. So `drop_device_info` must be called
	/// for the memory to be properly released
	WootingAnalog_DeviceInfo* new_device_info(uint16_t vendor_id,
		uint16_t product_id,
		char* manufacturer_name,
		char* device_name,
		WootingAnalog_DeviceID device_id,
		WootingAnalog_DeviceType device_type);

} // extern "C"